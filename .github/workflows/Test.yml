name: Test
on: [pull_request]

jobs:
  Style:
    name: "Check formatting"
    runs-on: ubuntu-latest
    env:
      PY_VERSION: "3.11"
    steps:
      - uses: actions/checkout@v3
        id: checkout
      - name: Install Poetry
        id: poetry
        run: |
          pipx install poetry
          poetry config virtualenvs.in-project true
          poetry config installer.parallel true
      - name: Set up Python 3.11 on ubuntu-latest
        id: python_setup
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "poetry"
      - name: Install dependencies
        id: dependencies
        run: poetry install --no-interaction --with dev
      - name: Enforce code formatting
        id: precommit
        run: poetry run pre-commit run --all-files

  Test:
    name: "Test Suite"
    needs: [Style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11"]
        metabase-version: ["v0.39.0.1", "v0.40.8", "v0.41.9", "v0.42.6", "v0.43.7.1", "v0.44.6.1", "v0.45.3", "latest"]
    runs-on: ${{ matrix.os }}
    env:
      MB_VERSION: ${{ matrix.metabase-version }}
      PY_VERSION: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v3
        id: checkout
      - name: Initialize docker containers
        id: docker
        run: docker compose up -d --wait && sleep 60
      - name: Install Poetry
        id: poetry
        run: |
          pipx install poetry
          poetry config virtualenvs.in-project true
          poetry config installer.parallel true
      - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
        id: python_setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      - name: Install dependencies
        id: dependencies
        continue-on-error: true
        run: poetry install --no-interaction --with dev
      - name: Fix dependency errors
        id: dependency_errors
        run: poetry install --no-interaction --no-root --with dev
      - name: Test with pytest
        id: pytest
        continue-on-error: true
        run: poetry run pytest --cov=metabase_tools --cov-report=xml --cov-report=html --cov-fail-under=95
      - name: Upload coverage to Codecov
        id: codecov
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${CODECOV_TOKEN}
      - name: Upload HTML coverage report
        id: coverage_upload
        uses: actions/upload-artifact@v3
        with:
          name: html-coverage
          path: htmlcov/
      - name: Upload log artifacts
        id: log_upload
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: temp/
      - name: Determine failure or success
        id: resolve
        run: |
          if [[ ${{ steps.pytest.outcome }} == "failure" ]]; then echo 'pytest failure'; exit 1; fi

  Docs:
    name: "Build Docs"
    needs: [Test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        id: checkout
      - name: Install Poetry
        id: poetry
        run: |
          pipx install poetry
          poetry config virtualenvs.in-project true
          poetry config installer.parallel true
      - name: Set up Python 3.11
        id: python_setup
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "poetry"
      - name: Install dependencies
        id: dependencies
        run: poetry install --no-interaction --with docs
      - name: Build HTML
        id: sphinx
        run: poetry run sphinx-build -W -a -E -b html docs/source/ docs/build/html
      - name: Upload sphinx artifacts
        id: sphinx_upload
        uses: actions/upload-artifact@v3
        with:
          name: html-docs
          path: docs/build/html/
